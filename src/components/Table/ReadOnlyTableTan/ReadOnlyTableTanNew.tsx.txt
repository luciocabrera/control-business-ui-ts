import React, { memo } from 'react';
import { flexRender, getCoreRowModel, getSortedRowModel, SortingState, useReactTable } from '@tanstack/react-table';
import { elementScroll, useVirtualizer, VirtualizerOptions } from '@tanstack/react-virtual';
import { ReadOnlyProps } from './ReadOnlyTable.types';
import { TableStyled } from './ReadOnlyTable.styled';

function easeInOutQuint(t: number) {
  return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
}

// const fetchSize = 25;
const ReadOnlyTableTanNew = <TData extends Record<string, unknown>>({
  // actions,
  columns,
  data,
  height,
}: ReadOnlyProps<TData>) => {
  const [sorting, setSorting] = React.useState<SortingState>([]);
  const parentRef = React.useRef<HTMLDivElement>(null);
  const scrollingRef = React.useRef<number>();

  const scrollToFn: VirtualizerOptions<any, any>['scrollToFn'] = React.useCallback((offset, canSmooth, instance) => {
    const duration = 1000;
    const start = parentRef?.current?.scrollTop || 0;
    const startTime = (scrollingRef.current = Date.now());

    const run = () => {
      if (scrollingRef.current !== startTime) return;
      const now = Date.now();
      const elapsed = now - startTime;
      const progress = easeInOutQuint(Math.min(elapsed / duration, 1));
      const interpolated = start + (offset - start) * progress;

      if (elapsed < duration) {
        elementScroll(interpolated, canSmooth, instance);
        requestAnimationFrame(run);
      } else {
        elementScroll(interpolated, canSmooth, instance);
      }
    };

    requestAnimationFrame(run);
  }, []);

  const table = useReactTable({
    data: data,
    columns: columns,
    state: {
      sorting,
    },
    onSortingChange: setSorting,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    debugTable: true,
    enableColumnResizing: true,
    columnResizeMode: 'onChange',
  });

  const { rows } = table.getRowModel();

  const rowVirtualizer = useVirtualizer({
    count: rows.length,
    getScrollElement: () => parentRef.current,
    estimateSize: () => 30,
    overscan: 5,
    scrollToFn,
  });

  return (
    <TableStyled ref={parentRef} height={height}>
      <table>
        <thead>
          {table.getHeaderGroups().map((headerGroup) => (
            <tr key={headerGroup.id}>
              {headerGroup.headers.map((header) => {
                return (
                  <th key={header.id} colSpan={header.colSpan} style={{ width: header.getSize() }}>
                    {header.isPlaceholder ? null : (
                      <div
                        {...{
                          className: header.column.getCanSort() ? 'cursor-pointer select-none' : '',
                          onClick: header.column.getToggleSortingHandler(),
                        }}
                      >
                        {flexRender(header.column.columnDef.header, header.getContext())}
                        {{
                          asc: <span>&#8593;</span>,
                          desc: <span>&#8595;</span>,
                        }[header.column.getIsSorted() as string] ?? null}
                      </div>
                    )}
                    <div
                      {...{
                        onMouseDown: header.getResizeHandler(),
                        onTouchStart: header.getResizeHandler(),
                        className: `resizer ${header.column.getIsResizing() ? 'isResizing' : ''}`,
                      }}
                    />
                  </th>
                );
              })}
            </tr>
          ))}
        </thead>
        <tbody
          style={{
            height: `${rowVirtualizer.getTotalSize()}px`,
            width: '100%',
            position: 'relative',
          }}
        >
          {rowVirtualizer.getVirtualItems().map((virtualRow) => {
            const row = rows[virtualRow.index];
            return (
              <tr
                key={virtualRow.index}
                style={{
                  height: `${virtualRow.size}px`,
                  transform: `translateY(${virtualRow.start}px)`,
                }}
              >
                {row.getVisibleCells().map((cell) => {
                  return (
                    <td key={cell.id} style={{ width: cell.column.getSize(), height: `${virtualRow.size}px` }}>
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </td>
                  );
                })}
              </tr>
            );
          })}
        </tbody>
      </table>
    </TableStyled>
  );

  // style={{
  //   position: 'absolute',
  //   top: 0,
  //   left: 0,
  //   width: '100%',
  //   height: `${virtualRow.size}px`,
  //   transform: `translateY(${virtualRow.start}px)`,
  // }}

  // return (
  //   <TableStyled ref={parentRef} height={height}>
  //     <table>
  //       <thead>
  //         {table.getHeaderGroups().map((headerGroup) => (
  //           <tr key={headerGroup.id}>
  //             {headerGroup.headers.map((header) => {
  //               return (
  //                 <th key={header.id} colSpan={header.colSpan} style={{ width: header.getSize() }}>
  //                   {header.isPlaceholder ? null : (
  //                     <div
  //                       {...{
  //                         className: header.column.getCanSort() ? 'cursor-pointer select-none' : '',
  //                         onClick: header.column.getToggleSortingHandler(),
  //                       }}
  //                     >
  //                       {flexRender(header.column.columnDef.header, header.getContext())}
  //                       {{
  //                         asc: ' ðŸ”¼',
  //                         desc: ' ðŸ”½',
  //                       }[header.column.getIsSorted() as string] ?? null}
  //                     </div>
  //                   )}
  //                   <div
  //                     {...{
  //                       onMouseDown: header.getResizeHandler(),
  //                       onTouchStart: header.getResizeHandler(),
  //                       className: `resizer ${header.column.getIsResizing() ? 'isResizing' : ''}`,
  //                     }}
  //                   />
  //                 </th>
  //               );
  //             })}
  //           </tr>
  //         ))}
  //       </thead>
  //       {/* <thead>
  //         {table.getHeaderGroups().map((headerGroup) => (
  //           <tr key={headerGroup.id}>
  //             {headerGroup.headers.map((header) => {
  //               return (
  //                 <th key={header.id} colSpan={header.colSpan} style={{ width: header.getSize() }}>
  //                   {header.isPlaceholder ? null : (
  //                     <div
  //                       {...{
  //                         className: header.column.getCanSort() ? 'cursor-pointer select-none' : '',
  //                         onClick: header.column.getToggleSortingHandler(),
  //                       }}
  //                     >
  //                       {flexRender(header.column.columnDef.header, header.getContext())}
  //                       {{
  //                         asc: <span>&#8593;</span>, //' ðŸ”¼',
  //                         desc: <span>&#8595;</span>, //' ðŸ”½',
  //                       }[header.column.getIsSorted() as string] ?? null}
  //                     </div>
  //                   )}
  //                   <div
  //                     {...{
  //                       onMouseDown: header.getResizeHandler(),
  //                       onTouchStart: header.getResizeHandler(),
  //                       className: `resizer ${header.column.getIsResizing() ? 'isResizing' : ''}`,
  //                     }}
  //                   />
  //                 </th>
  //               );
  //             })}
  //           </tr>
  //         ))}
  //       </thead> */}
  //       <tbody>
  //         {paddingTop > 0 && (
  //           <tr>
  //             <td style={{ height: `${paddingTop}px` }} />
  //           </tr>
  //         )}
  //         {virtualRows.map((virtualRow) => {
  //           const row = rows[virtualRow.index];
  //           return (
  //             <tr key={row.id} ref={virtualRow.measureRef}>
  //               {row.getVisibleCells().map((cell) => {
  //                 return <td key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</td>;
  //               })}
  //             </tr>
  //           );
  //         })}
  //         {paddingBottom > 0 && (
  //           <tr>
  //             <td style={{ height: `${paddingBottom}px` }} />
  //           </tr>
  //         )}
  //       </tbody>
  //       {/* <tfoot>
  //         {table.getFooterGroups().map((footerGroup) => (
  //           <tr key={footerGroup.id}>
  //             {footerGroup.headers.map((header) => (
  //               <th key={header.id}>
  //                 {header.isPlaceholder ? null : flexRender(header.column.columnDef.footer, header.getContext())}
  //               </th>
  //             ))}
  //           </tr>
  //         ))}
  //       </tfoot> */}
  //     </table>
  //   </TableStyled>
  // );
};
export default memo(ReadOnlyTableTanNew) as typeof ReadOnlyTableTanNew;
